
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { DataSet } from '@/types/data';
import { Download, FileText, Image, FileSpreadsheet } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ExportPanelProps {
  dataset: DataSet;
}

const ExportPanel: React.FC<ExportPanelProps> = ({ dataset }) => {
  const [isExporting, setIsExporting] = useState(false);
  const { toast } = useToast();

  const exportToPDF = async () => {
    setIsExporting(true);
    try {
      // This is a simplified implementation
      // In a real application, you would use libraries like jsPDF with more sophisticated rendering
      const reportContent = generateTextReport();
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${dataset.filename}_analysis_report.txt`;
      a.click();
      URL.revokeObjectURL(url);
      
      toast({
        title: "Report exported successfully!",
        description: "Your analysis report has been downloaded as a text file.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting the report.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const exportToCSV = () => {
    const csvContent = [
      dataset.columns.map(col => col.name).join(','),
      ...dataset.rows.map(row => 
        dataset.columns.map(col => {
          const value = row[col.name];
          return typeof value === 'string' && value.includes(',') ? `"${value}"` : value;
        }).join(',')
      )
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${dataset.filename}_processed.csv`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "CSV exported successfully!",
      description: "Your processed dataset has been downloaded.",
    });
  };

  const exportStatistics = () => {
    const statsReport = generateStatisticsReport();
    const blob = new Blob([statsReport], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${dataset.filename}_statistics.txt`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Statistics exported!",
      description: "Statistical summary has been downloaded.",
    });
  };

  const generateTextReport = () => {
    return `
DATA ANALYSIS REPORT
====================

Dataset: ${dataset.filename}
Analysis Date: ${new Date().toLocaleDateString()}
Total Rows: ${dataset.rows.length}
Total Columns: ${dataset.columns.length}

COLUMN SUMMARY
--------------
${dataset.columns.map(col => 
  `${col.name}: ${col.type} (${col.uniqueValues} unique values, ${col.nullCount} nulls)`
).join('\n')}

NUMERICAL COLUMNS ANALYSIS
--------------------------
${dataset.columns.filter(col => col.type === 'numerical').map(col => {
  const values = dataset.rows
    .map(row => row[col.name])
    .filter(val => typeof val === 'number' && !isNaN(val));
  
  if (values.length === 0) return `${col.name}: No valid numerical data`;
  
  const sorted = [...values].sort((a, b) => a - b);
  const mean = values.reduce((a, b) => a + b, 0) / values.length;
  const median = sorted.length % 2 === 0 
    ? (sorted[sorted.length/2 - 1] + sorted[sorted.length/2]) / 2 
    : sorted[Math.floor(sorted.length/2)];
  
  return `${col.name}:
  Mean: ${mean.toFixed(2)}
  Median: ${median.toFixed(2)}
  Min: ${sorted[0]}
  Max: ${sorted[sorted.length - 1]}
  `;
}).join('\n')}

CATEGORICAL COLUMNS ANALYSIS
----------------------------
${dataset.columns.filter(col => col.type === 'categorical').map(col => 
  `${col.name}: ${col.uniqueValues} categories (${col.sampleValues.slice(0, 5).join(', ')}${col.sampleValues.length > 5 ? '...' : ''})`
).join('\n')}

This report was generated by the Generalized CSV Data Analyzer & Visualizer.
    `;
  };

  const generateStatisticsReport = () => {
    const numericalCols = dataset.columns.filter(col => col.type === 'numerical');
    
    return `
STATISTICAL SUMMARY REPORT
==========================

Dataset: ${dataset.filename}
Generated: ${new Date().toLocaleString()}

${numericalCols.map(col => {
  const values = dataset.rows
    .map(row => row[col.name])
    .filter(val => typeof val === 'number' && !isNaN(val));
  
  if (values.length === 0) return `${col.name}: No numerical data available`;
  
  const sorted = [...values].sort((a, b) => a - b);
  const n = sorted.length;
  const sum = sorted.reduce((a, b) => a + b, 0);
  const mean = sum / n;
  const median = n % 2 === 0 ? (sorted[n/2 - 1] + sorted[n/2]) / 2 : sorted[Math.floor(n/2)];
  const variance = sorted.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / n;
  const std = Math.sqrt(variance);
  const q25 = sorted[Math.floor(n * 0.25)];
  const q75 = sorted[Math.floor(n * 0.75)];
  
  return `
${col.name.toUpperCase()}
${'='.repeat(col.name.length)}
Count: ${n}
Mean: ${mean.toFixed(4)}
Median: ${median.toFixed(4)}
Standard Deviation: ${std.toFixed(4)}
Minimum: ${sorted[0]}
25th Percentile: ${q25}
75th Percentile: ${q75}
Maximum: ${sorted[n-1]}
Range: ${(sorted[n-1] - sorted[0]).toFixed(4)}
`;
}).join('\n')}
    `;
  };

  return (
    <Card className="shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="w-5 h-5" />
          Export Options
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Reports Section */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Analysis Reports</h3>
            <div className="space-y-3">
              <Button 
                onClick={exportToPDF}
                disabled={isExporting}
                className="w-full justify-start"
                variant="outline"
              >
                <FileText className="w-4 h-4 mr-2" />
                Export Full Analysis Report
              </Button>
              
              <Button 
                onClick={exportStatistics}
                className="w-full justify-start"
                variant="outline"
              >
                <FileSpreadsheet className="w-4 h-4 mr-2" />
                Export Statistical Summary
              </Button>
            </div>
          </div>

          {/* Data Section */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Data Export</h3>
            <div className="space-y-3">
              <Button 
                onClick={exportToCSV}
                className="w-full justify-start"
                variant="outline"
              >
                <FileSpreadsheet className="w-4 h-4 mr-2" />
                Export Processed CSV
              </Button>
              
              <Button 
                disabled
                className="w-full justify-start"
                variant="outline"
              >
                <Image className="w-4 h-4 mr-2" />
                Export Visualizations (Coming Soon)
              </Button>
            </div>
          </div>
        </div>

        {/* Export Info */}
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <h4 className="font-semibold mb-2">Export Information</h4>
          <ul className="text-sm text-gray-700 space-y-1">
            <li>• Full Analysis Report: Comprehensive text report with all insights and statistics</li>
            <li>• Statistical Summary: Detailed numerical analysis for all quantitative columns</li>
            <li>• Processed CSV: Your original data with any cleaning applied</li>
            <li>• Individual visualizations export feature is coming in future updates</li>
          </ul>
        </div>

        {/* Dataset Summary */}
        <div className="mt-4 p-4 bg-gray-50 rounded-lg">
          <h4 className="font-semibold mb-2">Current Dataset</h4>
          <div className="text-sm text-gray-600">
            <p><strong>File:</strong> {dataset.filename}</p>
            <p><strong>Size:</strong> {dataset.rows.length} rows × {dataset.columns.length} columns</p>
            <p><strong>Upload Date:</strong> {dataset.uploadDate.toLocaleString()}</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default ExportPanel;
